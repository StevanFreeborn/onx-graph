name: Build and Deploy
on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths-ignore:
      - '**/*/README.md'
      - '**/*/LICENSE.md'
      - '**/*/docker-compose*.yml'
      - '**/*/.gitingore'
      - '**/*/.dockerignore'
      - '**/*/.editorconfig'
      - '**/*/Dockerfile'
      - '.vscode/**'
      - '.github/**'
jobs:
  version_client:
    name: Version client
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-current-version.outputs.version }}
      commit: ${{ steps.get-latest-commit.outputs.commit }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: latest
      - name: Get current version
        id: get-current-version
        working-directory: client
        run: echo "version=$(node -p 'require("./package.json").version')" >> $GITHUB_OUTPUT
      - name: Print current version
        run: echo "${{ steps.get-current-version.outputs.version }}"
      - name: Run semantic release to update version
        working-directory: client
        run: npx semantic-release
        continue-on-error: true
      - name: Commit version changes
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "<>"
          git add .
          git commit -m "chore: update client version"
          git push
        continue-on-error: true
      - name: Get latest commit
        id: get-latest-commit
        run: echo "commit=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
  version_server:
    name: Version server
    needs: version_client
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
      commit: ${{ steps.get-latest-commit.outputs.commit }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.version_client.outputs.commit }}
      - name: Set up .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.x.x
      - name: Install versionize
        run: dotnet tool install --global Versionize
      - name: Get current version
        working-directory: server/Server.API
        id: get-version
        run: echo "version=$(versionize inspect)" >> $GITHUB_OUTPUT
      - name: Print current version
        run: echo "${{ steps.get-version.outputs.version }}"
      - name: Run versionize to update version
        working-directory: server/Server.API
        run: versionize -i --exit-insignificant-commits
        continue-on-error: true
      - name: Commit version changes
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "<>"
          git add .
          git commit -m "chore: update server version"
          git push
        continue-on-error: true
      - name: Get latest commit
        id: get-latest-commit
        run: echo "commit=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
  build_images:
    name: Build images
    needs: [version_client, version_server]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.version_server.outputs.commit }}
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push server image
        working-directory: server/Server.API
        env:
          VERSION: ${{ needs.version_server.outputs.version }}
        run: |
          docker compose build
          docker compose push
      - name: Build and push client image
        working-directory: client
        env:
          VERSION: ${{ needs.version_client.outputs.version }}
          VITE_API_BASE_URL: ${{ secrets.API_BASE_URL }}
          CI: true
        run: |
          docker compose build
          docker compose push
  deploy:
    name: Deploy
    needs: [version_client, version_server, build_images]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.version_server.outputs.commit }}
      - name: Copy docker-compose file to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          source: docker-compose.production.yml
          target: onx-graph
      - name: SSH into server and start containers
        uses: appleboy/ssh-action@master
        env:
          SERVER_VERSION: ${{ needs.version_server.outputs.version }}
          CLIENT_VERSION: ${{ needs.version_client.outputs.version }}
          MONGO_INITDB_ROOT_USERNAME: ${{ secrets.MONGO_INITDB_ROOT_USERNAME }}
          MONGO_INITDB_ROOT_PASSWORD: ${{ secrets.MONGO_INITDB_ROOT_PASSWORD }}
          MONGO_INITDB_DATABASE: ${{ secrets.MONGO_INITDB_DATABASE }}
          Logging__LogLevel__Default: ${{ secrets.Logging__LogLevel__Default }}
          AllowedHosts: ${{ secrets.AllowedHosts }}
          JwtOptions__Secret: ${{ secrets.JwtOptions__Secret }}
          JwtOptions__Issuer: ${{ secrets.JwtOptions__Issuer }}
          JwtOptions__Audience: ${{ secrets.JwtOptions__Audience }}
          JwtOptions__ExpiryInMinutes: ${{ secrets.JwtOptions__ExpiryInMinutes }}
          MongoDbOptions__ConnectionString: ${{ secrets.MongoDbOptions__ConnectionString }}
          MongoDbOptions__DatabaseName: ${{ secrets.MongoDbOptions__DatabaseName }}
          CorsOptions__AllowedOrigins__0: ${{ secrets.CorsOptions__AllowedOrigins__0 }}
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          envs: SERVER_VERSION, CLIENT_VERSION, MONGO_INITDB_ROOT_USERNAME, MONGO_INITDB_ROOT_PASSWORD, MONGO_INITDB_DATABASE, Logging__LogLevel__Default, AllowedHosts, JwtOptions__Secret, JwtOptions__Issuer, JwtOptions__Audience, JwtOptions__ExpiryInMinutes, MongoDbOptions__ConnectionString, MongoDbOptions__DatabaseName, CorsOptions__AllowedOrigins__0
          script: |
            export SERVER_VERSION=$SERVER_VERSION
            export CLIENT_VERSION=$CLIENT_VERSION
            export MONGO_INITDB_ROOT_USERNAME=$MONGO_INITDB_ROOT_USERNAME
            export MONGO_INITDB_ROOT_PASSWORD=$MONGO_INITDB_ROOT_PASSWORD
            export MONGO_INITDB_DATABASE=$MONGO_INITDB_DATABASE
            export Logging__LogLevel__Default=$Logging__LogLevel__Default
            export AllowedHosts=$AllowedHosts
            export JwtOptions__Secret=$JwtOptions__Secret
            export JwtOptions__Issuer=$JwtOptions__Issuer
            export JwtOptions__Audience=$JwtOptions__Audience
            export JwtOptions__ExpiryInMinutes=$JwtOptions__ExpiryInMinutes
            export MongoDbOptions__ConnectionString=$MongoDbOptions__ConnectionString
            export MongoDbOptions__DatabaseName=$MongoDbOptions__DatabaseName
            export CorsOptions__AllowedOrigins__0=$CorsOptions__AllowedOrigins__0
            echo $JwtOptions__ExpiryInMinutes
            docker compose -f onx-graph/docker-compose.production.yml down
            docker-compose -f onx-graph/docker-compose.production.yml up -d --wait